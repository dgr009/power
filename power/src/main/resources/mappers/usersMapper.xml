<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="api.dao.UsersDao">
	<!-- 회원 가입 -->
	<insert id="usersRegister" parameterType="Users">
		insert into users values(#{userId},#{userPwd},#{userName},#{userAddress},#{userPost},#{userMail},#{userPhone},0,'0','1','bronze')
	</insert>
	<!-- 회원 아이디 중복 체크 -->
	<select id="usersHasId" parameterType="string" resultType="int">
		select count(*) from users where user_id=#{userId}
	</select>
	<!-- 회원 이메일 중복 체크 -->
	<select id="usersHasMail" parameterType="string" resultType="int">
		select count(*) from users where user_mail=#{userMail}
	</select>
	<!-- 회원 아이디 찾기 -->
	<select id="usersFindId" parameterType="hashmap" resultType="string">
		select user_id from users where user_name=#{userName} and user_mail=#{userMail}
	</select>
	<!-- 회원 비밀번호 찾기 -->
	<select id="usersFindPwd" parameterType="hashmap" resultType="string">
		select user_pwd from users where user_id=#{userId} and user_name=#{userName} and user_mail=#{userMail}
	</select>
	<!-- 회원 로그인 -->
	<select id="usersLogin" parameterType="hashmap" resultType="Users">
		select user_id userId,user_pwd userPwd,user_name userName,user_address userAddress,user_post userPost,user_mail userMail,user_phone userPhone,user_point userPoint,user_ishome userIsHome,enabled,user_grade userGrade from users where user_id=#{userId} and user_pwd=#{userPwd}
	</select>
	<!-- 즐겨찾기 추가 -->
	<insert id="usersBookmark" parameterType="hashmap">
		insert into bookmark values(#{orderId},#{ownerId})
	</insert>
	<!-- 즐겨찾기 해제 -->
	<delete id="usersBookmarkDelete" parameterType="hashmap">
		delete from bookmark where order_id=#{orderId} and owner_id=#{ownerId}
	</delete>
	<!-- 즐겨찾기 목록 -->
	<select id="usersBookmarkList" parameterType="hashmap" resultType="BookmarkList">
		<![CDATA[
		  	select * from  
				(select rownum rnum,a.* from 
					(select b.owner_id ownerId,h.home_title homeTitle from bookmark b,
					home h where b.owner_id=h.user_id and b.order_id=#{orderId}) a 
      			where rownum<=#{end}) 
 			where rnum>=#{start}
		]]>
	</select>
	<!-- 즐겨찾기 총개수 -->
	<select id="usersBookmarkListCnt" parameterType="string" resultType="int">
		select count(*) from bookmark where order_id=#{userId}
	</select>
	<select id="getBookmark" parameterType="hashmap" resultType="int">
		select count(*) from bookmark where order_id=#{orderId} and owner_id=#{ownerId}
	</select>
	<!-- 주문내역보기 -->
	<select id="usersOrderList" parameterType="hashmap" resultType="OrderList">
		<![CDATA[
		  	select * from  
				(select rownum rnum,a.* from 
					(select o.order_no orderNo,o.order_size orderSize,o.order_state orderState,o.order_date orderDate,
					o.order_price orderPrice,i.item_name itemName,i.user_id userId, o.option_name optionName,o.item_no itemNo
					 from order_statement o,users u,item i 
					 where o.item_no=i.item_no and o.user_id=u.user_id and u.user_id=#{orderId} order by o.order_date) a 
      			where rownum<=#{end})
 			where rnum>=#{start}
		]]>
	</select>
	<!-- 주문내역 총개수 -->
	<select id="usersOrderListCnt" parameterType="string" resultType="int">
		select count(*) from order_statement where user_id=#{userId}
	</select>
	<!-- 주문취소 하기 전체 -->
	<!-- 주문 취소시 재고 증가 -->
	<update id="usersItemInvenUp" parameterType="int">
		update item set item_inven=item_inven+(select order_size from order_statement where order_no=#{orderNo}) where item_no in (select i.item_no from item i,order_statement o where o.item_no=i.item_no and o.order_no=#{orderNo}) 
	</update>
	<!-- 주문취소하기 -->
	<delete id="usersOrderDelete" parameterType="int">
		delete from order_statement where order_no=#{orderNo}
	</delete>
	<!-- 주문자 포인트 증가 -->
	<update id="orderPointUp" parameterType="int">
		update users set user_point = user_point + (select order_price from order_statement where order_no=#{orderNo}) where user_id in (select user_id from order_statement where order_no=#{orderNo})
	</update>
	<!-- 판매자 포인트 감소 -->
	<update id="ownerPointDown" parameterType="int">
		update users set user_point = user_point - (select order_price from order_statement where order_no=#{orderNo}) where user_id in (select i.user_id from order_statement o,item i where o.item_no=i.item_no and o.order_no=#{orderNo})
	</update>
	<!-- 포인트 충전하기 -->
	<update id="usersChargePoint" parameterType="hashmap">
		update users set user_point=user_point+#{tradePoint} where user_id=#{userId}
	</update>
	<insert id="usersChargePointState" parameterType="hashmap">
		insert into point_statement values(sysdate,#{userId},#{tradePoint},'충전') 
	</insert>
	
	<!-- 포인트 환급하기 -->
	<update id="usersRefundPoint" parameterType="hashmap">
		update users set user_point=user_point-#{tradePoint} where user_id=#{userId}
	</update>
	<insert id="usersRefundPointState" parameterType="hashmap">
		insert into point_statement values(sysdate,#{userId},#{tradePoint}*(-1),'환급') 
	</insert>
	<!-- 포인트 내역확인 -->
	<select id="usersTradeList" parameterType="hashmap" resultType="TradeStatement" >
		<![CDATA[
		select * from
			(select rownum rnum,a.* from
				(select * from point_statement where user_id=#{userId} order by trade_date desc) a
			where rownum<=#{end})
 		where rnum>=#{start}
 		]]>
	</select>	
	<!-- 포인트내역 총개수 -->
	<select id="usersTradeListCnt" parameterType="string" resultType="int">
		select count(*) from point_statement where user_id=#{userId}
	</select>
	<!-- 개인 회원 정보 보기 -->
	<select id="usersInfo" parameterType="string" resultType="Users">
		select user_name,user_id,user_address,user_post,
			user_mail,user_phone,user_point,user_ishome,enabled,user_grade 
		from users where user_id=#{userId}
	</select>
	<!-- 개인 회원 정보 변경 -->
	<update id="usersUpdate" parameterType="Users">
		update users set user_pwd=#{userPwd},user_address=#{userAddress},user_post=#{userPost},user_mail=#{userMail},
			user_phone=#{userPhone} where user_id=#{userId}
	</update>
	<!-- 개인 회원 비활성화(탈퇴) -->
	<update id="usersDelete" parameterType="string">
		update users set enabled=0 where user_id=#{userId}
	</update>
	<!-- 개인 회원 활성화(복구) -->
	<update id="usersReverse" parameterType="string">
		update users set enabled=1 where user_id=#{userId}
	</update>
	<!-- 장바구니 리스트 -->
	<select id="usersBasketList" parameterType="hashmap" resultType="Basket">
		<![CDATA[
		select * from  
				(select rownum rnum,a.* from
		  			(select m.img_name imgName,i.user_id ownerId, i.item_name itemName,i.item_no itemNo,i.ITEM_PRICE itemPrice,i.ITEM_INVEN itemInven 
					from basket b,item i,item_img m 
					where m.img_no in(select min(img_no) from item_img group by item_no)
						and b.item_no=i.item_no and m.item_no=i.item_no and b.user_id=#{userId}) a
					where rownum<=#{end}) a2 
 			where rnum>=#{start}
		]]>
	</select>
	<!-- 장바구니 총개수 -->
	<select id="usersBasketListCnt" parameterType="string" resultType="int">
		select count(*) from basket where user_id=#{userId}
	</select>
	<!-- 장바구니 상품 삭제하기 -->
	<delete id="usersBasketDelete" parameterType="hashmap">
		delete from basket where user_id=#{userId} and item_no=#{itemNo}
	</delete>
	
	<!-- 홈페이지 개설 -->
	<!-- 회원 홈페이지 생성 -->
	<insert id="usersHomeRegister" parameterType="MiniHome">
		insert into home values(#{userId},#{homeTitle},#{homeImg},#{homeDesign},sysdate,0,#{homeIntroduce},0)
	</insert>
	<!-- 회원 홈페이지 개설여부 -->
	<update id="usersIsHomeOk" parameterType="string">
		update users set user_ishome=1 where user_id=#{userId}
	</update>
	<!-- 큰 태그 등록하기 -->
	<insert id="usersBigTagRegister" parameterType="hashmap">
	<selectKey keyProperty="bigKindNo" resultType="int" order="BEFORE">
		select big_kind_seq.nextval from dual
	</selectKey>
		insert into big_kind values(#{userId},#{bigTag},#{bigKindNo})
	</insert>
	<!-- 작은 태그 등록하기 -->
	<insert id="usersSmallTagRegister" parameterType="hashmap">
	<selectKey keyProperty="smallKindNo" resultType="int" order="BEFORE">
		select small_kind_seq.nextval from dual
	</selectKey>
		insert into small_kind values(#{userId},#{bigTag},#{smallTag},#{smallKindNo})
	</insert>
	
	<!-- 홈페이지 수정 -->
	<!-- 홈페이지 정보 받아오기 -->
	<select id="usersGetHomeInfo" parameterType="string" resultType="MiniHome">
		select * from home where user_id=#{userId}
	</select>
	<!-- 홈페이지 정보 수정하기 -->
	<update id="usersHomeUpdate" parameterType="MiniHome">
		update home set home_title=#{homeTitle},home_introduce=#{homeIntroduce},home_img=#{homeImg},home_design=#{homeDesign},home_active=#{homeActive} where user_id=#{userId}
	</update>
	<!-- 큰태그 지우기 -->
	<delete id="usersDeleteBigTag" parameterType="string">
		delete from big_kind where user_id=#{userId}
	</delete>
	<!-- 작은태그 지우기 -->
	<delete id="usersDeleteSmallTag" parameterType="string">
		delete from small_kind where user_id=#{userId}
	</delete>
	
	<!-- 주문 확정 하기 -->
	<update id="orderComplete" parameterType="int">
		update order_statement set order_state='주문완료' where order_no=#{orderNo} 
	</update>
	<!-- 판매자 등급 가져오기 -->
	<select id="selectOwnerGrade" parameterType="int" resultType="string">
		select user_grade from users where user_id in (select i.user_id from order_statement o,item i where i.item_no=o.item_no and o.order_no=#{orderNo})
	</select>
	<!-- 판매자 등급 실버로 -->
	<update id="ownerSilverGradeUp" parameterType="int">
		update users set user_grade='silver' where user_id in (select i.user_id from order_statement o,item i where i.item_no=o.item_no and o.order_no=#{orderNo}) 
	</update>
	<!-- 판매자 등급 골드로 -->
	<update id="ownerGoldGradeUp" parameterType="int">
		update users set user_grade='gold' where user_id in (select i.user_id from order_statement o,item i where i.item_no=o.item_no and o.order_no=#{orderNo})
	</update>
	<!-- 판매자 총 판매량 조회하기 -->
	<select id="getTotalSellPoint" parameterType="int" resultType="int">
		select sum(o.order_price) from item i,order_statement o where o.item_no=i.item_no and i.user_id=(select i.user_id from order_statement o,item i where i.item_no=o.item_no and o.order_no=#{orderNo}) and o.order_state='주문완료' group by i.user_id,o.order_state 
	</select>
	
	<!-- 메인 랭킹 5명 가져오기 -->
	<select id="getRankSide" resultType="MiniHome">
		<![CDATA[
		select rownum, a.* from 
			(select i.user_id userId,h.home_img homeImg from item i,order_statement o,home h
				where h.user_id=i.user_id and o.item_no=i.item_no and i.user_id in(select i.user_id from order_statement o,item i where i.item_no=o.item_no) and o.order_state='주문완료'  group by i.user_id,o.order_state,h.home_img
				order by sum(o.order_price) desc) a where rownum<=5
		]]>
	</select>
	
	<!-- 상품평가작성 -->
	<insert id="insertReview" parameterType="hashmap">
		<selectKey keyProperty="reviewNo"  resultType="int" order="BEFORE">
			select reviewno_seq.nextval from dual
		</selectKey>
		
		insert into item_review values(#{reviewNo},#{reviewContent},#{reviewScore},sysdate,(select user_id from order_statement where order_no=#{orderNo}),(select item_no from order_statement where order_no=#{orderNo}))
	</insert>
</mapper>