<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="api.dao.UsersDao">
	<!-- 회원 가입 -->
	<insert id="usersRegister" parameterType="Users">
		insert into users values(#{userId},#{userPwd},#{userName},#{userAddress},#{userPost},#{userMail},#{userPhone},0,'0','1','bronze')
	</insert>
	<!-- 회원 아이디 중복 체크 -->
	<select id="usersHasId" parameterType="string" resultType="int">
		select count(*) from users where user_id=#{userId}
	</select>
	<!-- 회원 이메일 중복 체크 -->
	<select id="usersHasMail" parameterType="string" resultType="int">
		select count(*) from users where user_mail=#{userMail}
	</select>
	<!-- 회원 아이디 찾기 -->
	<select id="usersFindId" parameterType="hashmap" resultType="string">
		select user_id from users where user_name=#{userName} and user_mail=#{userMail}
	</select>
	<!-- 회원 비밀번호 찾기 -->
	<select id="usersFindPwd" parameterType="hashmap" resultType="string">
		select user_pwd from users where user_id=#{userId} and user_name=#{userName} and user_mail=#{userMail}
	</select>
	<!-- 회원 로그인 -->
	<select id="usersLogin" parameterType="hashmap" resultType="Users">
		select user_id userId,user_pwd userPwd,user_name userName,user_address userAddress,user_post userPost,user_mail userMail,user_phone userPhone,user_point userPoint,user_ishome userIsHome,enabled,user_grade userGrade from users where user_id=#{userId} and user_pwd=#{userPwd}
	</select>
	<!-- 즐겨찾기 추가 -->
	<insert id="usersBookmark" parameterType="hashmap">
		insert into bookmark values(#{orderId},#{ownerId})
	</insert>
	<!-- 즐겨찾기 해제 -->
	<delete id="usersBookmarkDelete" parameterType="hashmap">
		delete from bookmark where order_id=#{orderId} and owner_id=#{ownerId}
	</delete>
	<!-- 즐겨찾기 목록 -->
	<select id="usersBookmarkList" parameterType="hashmap" resultType="BookmarkList">
		<![CDATA[
		  	select * from  
				(select rownum rnum,a.* from 
					(select b.owner_id ownerId,h.home_title homeTitle,h.home from bookmark b,
					home h where b.owner_id=h.user_id and b.order_id=#{orderId}) a 
      			where rownum<=#{end}) 
 			where rnum>=#{start}
		]]>
	</select>
	<!-- 주문내역보기 -->
	<select id="usersOrderList" parameterType="hashmap" resultType="OrderList">
		<![CDATA[
		  	select * from  
				(select rownum rnum,a.* from 
					(select o.order_no orderNo,o.order_size orderSize,o.order_state orderState,o.order_price orderPrice,i.item_name itemName from order_statement o,
					users u,item i where o.item_no=i.item_no and o.user_id=u.user_id and u.user_id=#{orderId}) a 
      			where rownum<=#{end})
 			where rnum>=#{start}
		]]>
	</select>
	<!-- 주문취소하기 -->
	<delete id="usersOrderDelete" parameterType="int">
		delete from order_statement where order_no=#{orderNo}
	</delete>
	<!-- 포인트 충전하기 -->
	<update id="usersChargePoint" parameterType="hashmap">
		update users set user_point=user_point+#{tradePoint} where user_id=#{userId}
	</update>
	<insert id="usersChargePointState" parameterType="hashmap">
		insert into point_statement values(sysdate,#{userId},#{tradePoint},'충전') 
	</insert>
	
	<!-- 포인트 환급하기 -->
	<update id="usersRefundPoint" parameterType="hashmap">
		update users set user_point=user_point-#{tradePoint} where user_id=#{userId}
	</update>
	<insert id="usersRefundPointState" parameterType="hashmap">
		insert into point_statement values(sysdate,#{userId},#{tradePoint}*(-1),'환급') 
	</insert>
	<!-- 포인트 내역확인 -->
	<select id="usersTradeList" parameterType="string" resultType="TradeStatement" >
		select * from point_statement where user_id=#{userId}
	</select>	
	<!-- 개인 회원 정보 보기 -->
	<select id="usersInfo" parameterType="string" resultType="Users">
		select user_name,user_id,user_address,user_post,
			user_mail,user_phone,user_point,user_ishome,enabled,user_grade 
		from users where user_id=#{userId}
	</select>
	<!-- 개인 회원 정보 변경 -->
	<update id="usersUpdate" parameterType="Users">
		update users set user_pwd=#{userPwd},user_address=#{userAddress},user_post=#{userPost},user_mail=#{userMail},
			user_phone=#{userPhone} where user_id=#{userId}
	</update>
	<!-- 개인 회원 비활성화(탈퇴) -->
	<update id="usersDelete" parameterType="string">
		update users set enabled=0 where user_id=#{userId}
	</update>
	<!-- 개인 회원 활성화(복구) -->
	<update id="usersReverse" parameterType="string">
		update users set enabled=1 where user_id=#{userId}
	</update>
	<!-- 장바구니 리스트 -->
	<select id="usersBasketList" parameterType="hashmap" resultType="Basket">
		<![CDATA[
		select * from  
				(select rownum rnum,a.* from
		  			(select m.img_name imgName, i.item_name itemName,i.ITEM_PRICE itemPrice,i.ITEM_INVEN itemInven 
					from basket b,item i,item_img m 
					where m.img_no in(select min(img_no) from item_img group by item_no)
						and b.item_no=i.item_no and b.user_id=#{userId}) a
					where rownum<=#{end}) a2 
 			where rnum>=#{start}
		]]>
	</select>
	<!-- 장바구니 상품 삭제하기 -->
	<delete id="usersBasketDelete" parameterType="string">
		delete from basket where user_id=#{userId}
	</delete>
</mapper>